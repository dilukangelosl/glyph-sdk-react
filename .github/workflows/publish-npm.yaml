name: Publish to NPM

on:
  workflow_dispatch:
  push:
    tags:
      - "v**"

env:
  GITHUB_TOKEN: ${{ secrets.GH_PACKAGE_READ }}

jobs:
  release:
    name: Release to npm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://registry.npmjs.org'

      - name: Ensure .npmrc is configured correctly
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Check if version exists
        id: version_check
        run: |
          cd lib
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PACKAGE_VERSION"
          
          # Check if this version already exists in the registry
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://registry.npmjs.org/@use-glyph/sdk-react/$PACKAGE_VERSION)
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "Version $PACKAGE_VERSION already exists in the registry"
            echo "version_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION does not exist in the registry"
            echo "version_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine package visibility
        id: package_visibility
        run: |
          cd lib
          # Check if package is private
          IS_PRIVATE=$(node -p "require('./package.json').private || false")
          echo "Package private flag: $IS_PRIVATE"
          
          if [ "$IS_PRIVATE" == "true" ]; then
            echo "Package is private, will publish with restricted access"
            echo "access_type=restricted" >> $GITHUB_OUTPUT
          else
            echo "Package is not private, will publish with public access"
            echo "access_type=public" >> $GITHUB_OUTPUT
          fi

      - name: Wait for NPM registry
        if: steps.version_check.outputs.version_exists == 'false'
        run: |
          echo "Waiting for NPM registry to be ready..."
          sleep 30

      - name: Publish to npm
        if: steps.version_check.outputs.version_exists == 'false'
        run: |
          cd lib
          # Get the access type from the previous step
          ACCESS_TYPE="${{ steps.package_visibility.outputs.access_type }}"
          echo "Publishing with access: $ACCESS_TYPE"
          
          # Temporarily remove the private flag to allow publishing
          # Save the original package.json content
          cp package.json package.json.backup
          
          # Remove the private flag
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json')); delete pkg.private; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"
          echo "Removed private flag from package.json for publishing"
          
          # Try to publish with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
          PUBLISH_SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUBLISH_SUCCESS" != "true" ]; do
            echo "Publishing attempt $((RETRY_COUNT+1))..."
            if pnpm publish --no-git-checks --access $ACCESS_TYPE; then
              PUBLISH_SUCCESS=true
              echo "Publishing successful!"
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Publishing failed. Waiting before retry..."
                sleep 60
              else
                echo "All publishing attempts failed."
                exit 1
              fi
            fi
          done
          
          # Restore the original package.json
          mv package.json.backup package.json
          echo "Restored original package.json"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publishing (version exists)
        if: steps.version_check.outputs.version_exists == 'true'
        run: echo "Skipping publish as version already exists in the registry"

  notify:
    name: Notify Chat
    if: always()
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Notification to Slack
        uses: yuga-labs/slack-github-action@main
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
